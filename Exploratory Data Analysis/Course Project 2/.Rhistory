tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
column.count          <- length(colnames(tidy.full))
tidy.full             <- aggregate(subjects.full[, 3:column.count], grouping, mean, na.rm = TRUE)
## Give tidy column names
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
prefix.name           <- 'Average by Subject and Activity'
new.column.names      <- paste(rep(prefix.name, length(old.column.names)), old.column.names)
colnames(tidy.full)[3:column.count] <- new.column.names
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/test/X_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/test/y_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/X_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
test.subjects   <- read.table(unz(temp, fileList[1]))
test.x          <- read.table(unz(temp, fileList[2]))
test.y          <- read.table(unz(temp, fileList[3]))
train.subjects  <- read.table(unz(temp, fileList[4]))
train.x         <- read.table(unz(temp, fileList[5]))
train.y         <- read.table(unz(temp, fileList[6]))
activities      <- read.table(unz(temp, fileList[7]))
features        <- read.table(unz(temp, fileList[8]))
unlink(temp)
## Merge testSubjects and trainSubjects into one vector, give descriptive column name
subjects              <- rbind(test.subjects, train.subjects)
subjects.x            <- rbind(test.x, train.x)
subjects.y            <- rbind(test.y, train.y)
## Rename Columns in subjects, subjects.x, subjects.y and activities
colnames(subjects)    <- 'Subject'
colnames(subjects.y)  <- 'ActivityID'
colnames(subjects.x)  <- features[, 2]
colnames(activities)  <- c('ActivityID', 'Activity')
## Get the columns with mean() or std() in their name and make one vector of them
mean.cols             <- grep('mean\\(\\)', colnames(subjects.x), ignore.case = TRUE)
std.cols              <- grep('Std\\(\\)', colnames(subjects.x), ignore.case = TRUE)
mean.std.cols         <- c(mean.cols, std.cols)
## Subset the data with the mean.std.cols vector
trim.subjects.x   <- subjects.x[, mean.std.cols]
## Name columns based on their column names from subjects.x
colnames(trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
column.count          <- length(colnames(subjects.full))
tidy.full             <- aggregate(subjects.full[, 3:column.count], grouping, mean, na.rm = TRUE)
## Give tidy column names
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
prefix.name           <- 'Average by Subject and Activity'
new.column.names      <- paste(rep(prefix.name, length(old.column.names)), old.column.names)
colnames(tidy.full)[3:column.count] <- new.column.names
View(tidy.full)
outcome <- "heart attack"
num <- 20
## Read in outcome data
outcome.data <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = FALSE)
hospital.data <- read.csv("hospital-data.csv", stringsAsFactors = FALSE)
## Check that outcome is valid
if (sum(toupper(c("heart attack", "heart failure", "pneumonia")) == toupper(outcome)) <= 0)
{
stop ("invalid outcome")
}
if (!is.numeric(num) & sum(toupper(c("BEST", "WORST")) == toupper(num)) <= 0)
{
stop ("invalid num")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcome.text <- gsub("heart", "Heart", outcome)
outcome.text <- gsub("failure", "Failure", outcome.text)
outcome.text <- gsub("attack", "Attack", outcome.text)
outcome.text <- gsub("pneumonia", "Pneumonia", outcome.text)
outcome.text <- gsub(" ", ".", outcome.text)
outcome.text <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", outcome.text, sep = "")
outcome.states <- unique(hospital.data$State)
outcome.data[, outcome.text] <- as.numeric(outcome.data[, outcome.text])
if(num == "worst")
{
worst.or.best = TRUE
}
else
{
worst.or.best = FALSE
}
if(num == "worst" | num == "best")
{
return.row <- 1
}
else
{
return.row <- num
}
outcome.states <- sort(outcome.states)
result <- data.frame(c("hospital", "state"))
for(state in outcome.states)
{
if(outcome == "pneumonia")
{
test <- outcome.data[order(outcome.data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, outcome.data$Hospital.Name, na.last = TRUE, decreasing = worst.or.best), ]
test <- test[is.na(test$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) == FALSE, ]
}
if(outcome == "heart attack")
{
test <- outcome.data[order(outcome.data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome.data$Hospital.Name, na.last = TRUE, decreasing = worst.or.best), ]
test <- test[is.na(test$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) == FALSE, ]
}
if(outcome == "heart failure")
{
test <- outcome.data[order(outcome.data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, outcome.data$Hospital.Name, na.last = TRUE, decreasing = worst.or.best), ]
test <- test[is.na(test$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) == FALSE, ]
}
test.data <- subset(test, State == state)
result <- rbind(result, hospital = test.data[return.row, "Hospital.Name"], state = state)
}
result
## Read in outcome data
outcome.data <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = FALSE)
hospital.data <- read.csv("hospital-data.csv", stringsAsFactors = FALSE)
## Check that outcome is valid
if (sum(toupper(c("heart attack", "heart failure", "pneumonia")) == toupper(outcome)) <= 0)
{
stop ("invalid outcome")
}
if (!is.numeric(num) & sum(toupper(c("BEST", "WORST")) == toupper(num)) <= 0)
{
stop ("invalid num")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcome.text <- gsub("heart", "Heart", outcome)
outcome.text <- gsub("failure", "Failure", outcome.text)
outcome.text <- gsub("attack", "Attack", outcome.text)
outcome.text <- gsub("pneumonia", "Pneumonia", outcome.text)
outcome.text <- gsub(" ", ".", outcome.text)
outcome.text <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", outcome.text, sep = "")
outcome.states <- unique(hospital.data$State)
outcome.data[, outcome.text] <- as.numeric(outcome.data[, outcome.text])
if(num == "worst")
{
worst.or.best = TRUE
}
else
{
worst.or.best = FALSE
}
if(num == "worst" | num == "best")
{
return.row <- 1
}
else
{
return.row <- num
}
outcome.states <- sort(outcome.states)
result <- data.frame(c("hospital", "state"))
## Read in outcome data
outcome.data <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = FALSE)
hospital.data <- read.csv("hospital-data.csv", stringsAsFactors = FALSE)
## Check that outcome is valid
if (sum(toupper(c("heart attack", "heart failure", "pneumonia")) == toupper(outcome)) <= 0)
{
stop ("invalid outcome")
}
if (!is.numeric(num) & sum(toupper(c("BEST", "WORST")) == toupper(num)) <= 0)
{
stop ("invalid num")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcome.text <- gsub("heart", "Heart", outcome)
outcome.text <- gsub("failure", "Failure", outcome.text)
outcome.text <- gsub("attack", "Attack", outcome.text)
outcome.text <- gsub("pneumonia", "Pneumonia", outcome.text)
outcome.text <- gsub(" ", ".", outcome.text)
outcome.text <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", outcome.text, sep = "")
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
swirl()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("woo hoo")
submit()
submit()
mad_libs(place = "Detroit", adjective = "sinful"), noun = "sex")
mad_libs(place = "Detroit", adjective = "sinful", noun = "sex")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags, flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sappply(flags, unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10,)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replacement = TRUE, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.Time() - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", subtitle = "My Plot Subtitle")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot (cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
exit
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
setwd("/Users/dbucholt/Programming/R/Coursera_Data_Science_Homework/Exploratory Data Analysis/Course Project 2/")
library(ggplot2)
## Read the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the rows in SCC[, "EI.Sector"] that refer to mobile and on-road
## which are what I consider "motor vehicles" since I take that to mean they
## are referring to items on the highways, not in the air
motor.vehicle.rows <- intersect(
grep('mobile', SCC[, "EI.Sector"], ignore.case = TRUE)
,grep('on-road', SCC[, "EI.Sector"], ignore.case = TRUE)
)
motor.vehicle.rows <- setdiff(
motor.vehicle.rows
,grep('non-road', SCC[, "EI.Sector"], ignore.case = TRUE)
)
SCC.motor.vehicles <- SCC[motor.vehicle.rows, "SCC"]
## Get the NEI rows that are in SCC.motor.vehicles
NEI.motor.vehicle.rows <- NEI[, "SCC"] %in% SCC.motor.vehicles
NEI.motor.vehicle <- NEI[NEI.motor.vehicle.rows, ]
## Get the NEI motor vehicle rows that are in Baltimore City
NEI.baltimore.motor.vehicle <- NEI.motor.vehicle[NEI.motor.vehicle[, "fips"] == 24510, ]
## Aggregate by the year to get totals and fix column names
total.emissions <- aggregate(
NEI.baltimore.motor.vehicle[, "Emissions"]
,by = list(NEI.baltimore.motor.vehicle[, "year"])
,FUN = sum
,na.rm = TRUE
)
colnames(total.emissions) <- c("Year", "TotalEmissions")
## Do this to make the scientific notation go away (our numbers aren't that big)
options(scipen = 5)
## Plot a line chart and fit a line
coal.plot <- qplot(Year, TotalEmissions, data = total.emissions)
coal.plot <- coal.plot + stat_smooth(method = "lm", aes(group = 1))
coal.plot
#write the file plot1.png
dev.copy(device = png, "plot5.png")
dev.off()
library(ggplot2)
## Read the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the rows in SCC[, "EI.Sector"] that refer to mobile and on-road
## which are what I consider "motor vehicles" since I take that to mean they
## are referring to items on the highways, not in the air
motor.vehicle.rows <- intersect(
grep('mobile', SCC[, "EI.Sector"], ignore.case = TRUE)
,grep('on-road', SCC[, "EI.Sector"], ignore.case = TRUE)
)
motor.vehicle.rows <- setdiff(
motor.vehicle.rows
,grep('non-road', SCC[, "EI.Sector"], ignore.case = TRUE)
)
SCC.motor.vehicles <- SCC[motor.vehicle.rows, "SCC"]
## Get the NEI rows that are in SCC.motor.vehicles
NEI.motor.vehicle.rows <- NEI[, "SCC"] %in% SCC.motor.vehicles
NEI.motor.vehicle <- NEI[NEI.motor.vehicle.rows, ]
## Get the NEI motor vehicle rows that are in Baltimore City
NEI.baltimore.motor.vehicle <- NEI.motor.vehicle[NEI.motor.vehicle[, "fips"] == 24510, ]
NEI.balt.la.motor.vehicle <- NEI.motor.vehicle[c(NEI.motor.vehicle[, "fips"] == 24510, NEI.motor.vehicle[, "fips"] == 06037), ]
View(NEI.baltimore.motor.vehicle)
View(NEI.balt.la.motor.vehicle)
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips == 24510 | fips == 06037)
View(NEI.balt.la.motor.vehicle)
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips == 06037)
View(NEI.motor.vehicle)
View(NEI.balt.la.motor.vehicle)
View(NEI.motor.vehicle)
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips == 06037)
View(NEI.balt.la.motor.vehicle)
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips = 06037)
View(NEI.balt.la.motor.vehicle)
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips = 06037)
NEI.balt.la <- subset(NEI.motor.vehicle, fips = 06037)
View(NEI.balt.la)
NEI.balt.la <- subset(NEI.motor.vehicle, fips == 06037)
NEI.balt.la <- subset(NEI.motor.vehicle, fips == 24510)
NEI.balt.la <- subset(NEI.motor.vehicle, fips == '06037')
NEI.balt.la.motor.vehicle <- subset(NEI.motor.vehicle, fips == '24510' | fips == '06037')
View(NEI.balt.la.motor.vehicle)
## Aggregate by the year to get totals and fix column names
total.emissions <- aggregate(
NEI.balt.la.motor.vehicle[, "Emissions"]
,by = list(NEI.baltimore.motor.vehicle[, "year"])
,FUN = sum
,na.rm = TRUE
)
colnames(total.emissions) <- c("Year", "TotalEmissions")
## Do this to make the scientific notation go away (our numbers aren't that big)
options(scipen = 5)
## Plot a line chart and fit a line
## Aggregate by the year to get totals and fix column names
total.emissions <- aggregate(
NEI.balt.la.motor.vehicle[, "Emissions"]
,by = list(NEI.balt.la.motor.vehicle[, "year"])
,FUN = sum
,na.rm = TRUE
)
colnames(total.emissions) <- c("Year", "TotalEmissions")
## Do this to make the scientific notation go away (our numbers aren't that big)
options(scipen = 5)
## Plot a line chart and fit a line
coal.plot <- qplot(Year, TotalEmissions, data = total.emissions, facets = . ~ fips)
coal.plot <- coal.plot + stat_smooth(method = "lm", aes(group = 1))
coal.plot
total.emissions <- aggregate(
NEI.balt.la.motor.vehicle[, "Emissions"]
,by = list(NEI.balt.la.motor.vehicle[, "year"], NEI.balt.la.motor.vehicle[, "fips"],)
,FUN = sum
,na.rm = TRUE
)
## Aggregate by the year to get totals and fix column names
total.emissions <- aggregate(
NEI.balt.la.motor.vehicle[, "Emissions"]
,by = list(NEI.balt.la.motor.vehicle[, "year"], NEI.balt.la.motor.vehicle[, "fips"])
,FUN = sum
,na.rm = TRUE
)
colnames(total.emissions) <- c("Year", "TotalEmissions")
View(total.emissions)
colnames(total.emissions) <- c("Year", "fips", "TotalEmissions")
## Do this to make the scientific notation go away (our numbers aren't that big)
options(scipen = 5)
## Plot a line chart and fit a line
coal.plot <- qplot(Year, TotalEmissions, data = total.emissions, facets = . ~ fips)
coal.plot <- coal.plot + stat_smooth(method = "lm", aes(group = 1))
coal.plot
##write the file plot1.png
dev.copy(device = png, "plot6.png")
dev.off()
